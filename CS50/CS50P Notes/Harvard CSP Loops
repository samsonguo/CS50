#while
i = 0
while i < 3:
    print("meow")
    i += 1 or i = i + 1

#for
for i = [0, 1, 2]
    print("meow)

#range
for i in range(3):
    print("meow)

best practice to use _ when variable is needed for the program but the value is meaningless

#print multiple times on different lines
print("meow\n" * 3, end="")
output "meow" on separate lines and get rid of extra whitespace with end

#validating input
While True:
    n = int(input("What's n? "))
    if n > 0:
        break
for _ in range(n):
    print("meow")

#writing loop function
def main():
    number = get_number()
    meow(number)

 def get_number():
    while true:
        n = int(input("What's n?"))
        if n > 0:
            break
    return n

def meow(n):
    for _ in range(n):
        print("meow")

main()

#Iteration with lists
students = ["Hermione", "Harry", "Ron"]
print(students[0]) - Hermione
etc...

or

students = ["Hermione", "Harry", "Ron"]
for student in students:
    print(student)

#len
students = ["Hermione", "Harry", "Ron"]
for i in range(len(students)):
    print(students[i])

#list students with ranking
students = ["Hermione", "Harry", "Ron"]
for i in range(len(students)):
    print(i + 1, students[i])

#dictionaries  - can use words instead of numbers to index in dictionaries
{key:value}
students = {
    "hermione": "gryffindor",
    "harry": "gryffindor",
    "ron": "gryffindor",
    "draco": "slytherin",
print(student["hermione"] - will print out "gryffindor"

#print both key and value
for student in students:
    print(student, students[student], sep ",")

#dictionaries in list
students = [
    {"name": "Hermione","house": "gryffindor", "patronus": "otter"},
    {"name": "harry", "house": "gryffindor", "patronus": "stag"},
    {"name": "ron", "house": "gryffindor", "patronus": "jack russel terrier"},
    {"name": "draco", "house": "slytherin", "patronus": None}
]

for student in students:
    print(student["name"], student["house], student["patronus"], sep=",")

#Nested Loops - creating mario

#Creating vertical blocks
def main():
    print column(3)

def print_column(height):
    for _ in range(height):
        print("#")

main()

#Creating horizontal blocks
def main():
    print_row(4)

def print_row(width)
    print("?" * width)

main()

#Creating square - nesting loops
def main():
    print_square(3)

def print_square(size):
    for i in range (size): #for each row in square
        for j in range(size): #for each brick in row
            print("#", end="") #print brick
        print()

main()

#Combined
def main():
    print_square(3)

def print_square(size):
    for i in range (size):
        print_row(size)

def print_row(width)
    print("#" * width)

main()