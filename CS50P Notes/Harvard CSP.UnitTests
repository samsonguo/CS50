#testing calculator

#file - calculator.py
def main():
    x = int(input("What's x?"))
    print('x squared is", square(x))
def square (n):
    return n * n
if _name_ == "_main_":
main()

#new file - test_calculator.py

from calculator import square
def test_square():
    if square(2) != 4:
        print("2 squared was not 4")
    if square(3) != 9:
            print("3 squared was not 9")
if _name_ == "_main_":
main()

#assert
from calculator import square
def test_square():
    try:
        assert(2) != 4:
    except AssertionError:
        print("2 squared was not 4")
    try:
        assert(3) != 9:
    except AssertionError:
        print("3 squared was not 9")
if _name_ == "_main_":
    main()

or
from calculator import square
def test_square():
    assert square(2) == 4
    assert square(3) == 9
    assert square(-2) == 4
    assert square(-3) == 9
    assert square(0) == 0

#pytest
pip install pytest

#categories of tests
from calculator import square

def test_positive():
    assert square(2) == 4
    assert square(3) == 9
def test_negative():
    assert square(-2) == 4
    assert square(-3) == 9
def test_zero():
    assert square(0) == 0

#testing for exceptions
def main():
    x = input("What's x? ")
    print("x squared is", square(x))

def square(n):
    return n * n
if _name_ == "_main_":
    main()
def test_str():
    with pytest.raises(TypeError):
        square("cat")

#side effects and testing
def main():
    name = input("What's your name?")
    print(hello(name))

def hello(to="world")
    return f"hello, {to}"
if _name_ == "_main_":
    main()

test file

from hello import hello
def test_default():
    assert hello("David") == "hello, David"
def test_argument():
    assert hello() == "hello, world"

#loops
def test_argument():
    for name in ["Hermione", "Harry", "Ron"]:
        assert hello(name) == f"hello, name {name}"

#collections of tests
create a folder
create a package with __init__.py - treats folder as package

